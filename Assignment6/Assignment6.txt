Assignment 6.

This set contains 3 exercises worth a total of 4 points.

EXERCISE 6.1: Lexer and Parser (2 points)

The purpose of this exercise is to make a lexer and parser
specification for a small grammar.

Do exercise 1 in trial exam set for January 2014. 
  https://learnit.itu.dk/pluginfile.php/130278/course/section/71049/trial2013.pdf

Exercise 1 contains sub exercises 1.1 to 1.5.

The grammar is a bit challenging due to the RE RE rule and
precedence. The point is that space is used for two different
purposes, i.e., to separate tokens in general but also to sequence two
regular expressions together. If you write the grammer as shown in the
assignment, then the example ’a’ ’b’ * | ’c’ will likely parse into
’a’ ((’b’ *) | ’c’) and not (’a’ (’b’ *)) | ’c’.

You can solve this problem in two ways

 a) Use the built in %prec directive in the grammar specification file
 (*.fsy) to explicitly specify a rules precedence. For instance, you
 can do something like this:

  %left OR
  %left SEQ
  %left TIMES

where SEQ is the name given the precedence directive. OR and TIMES
refer to terminals.

The grammar then has a rule using the SEQ precedence directive:

Re:
    CHAR                                { Char $1       }
    ...
  | Re Re %prec SEQ               { Seq($1,$2)    }
;

Look in the manual for OCamlYacc for more info on %prec:
  http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual026.html

b) Alternatively re-write the grammar similar to the example on
 figure 3.11 onpage 66 in BCD. 

You need to specify precedence for the rules with *, | and then
sequencing two regular expressions. For instance, use something like
this:

Re:
    Re OR Re                            { Choice($1,$3) }
  | Re1                                    { $1            }
;
Re1:
    Re1 Re2                              { Seq($1,$2)    }
  | Re2                                     { $1            }
;
Re2:
    CHAR                                { Char $1       }
  | ...


EXERCISE 6.2: Closed Expression (1 point)

Do exercise 6.6 in PLC:

Exercise 6.6:
Write an F# function “check : expr -> bool” that checks that all variables and function names are defined when they are used, and returns true if they are. 
This checker should accept the micro-ML higher-order language. 
That is, in the abstract syntax ‘Call(e1, e2)’ for a function call, the expression ‘e1’ can be an arbitrary expression and need not be a variable name.The ‘check’ function needs to carry around an environment to know which variables are bound. This environment may just be a list of the bound variables.